
Echo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000032e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000382  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000086  00000000  00000000  000003a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000658  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001c0  00000000  00000000  00000a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000464  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000090  00000000  00000000  000010a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000015f  00000000  00000000  00001134  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000002fb  00000000  00000000  00001293  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000090  00000000  00000000  0000158e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 66 01 	call	0x2cc	; 0x2cc <main>
  64:	0c 94 95 01 	jmp	0x32a	; 0x32a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
  6c:	84 b3       	in	r24, 0x14	; 20
  6e:	80 7f       	andi	r24, 0xF0	; 240
  70:	84 bb       	out	0x14, r24	; 20

	//change LCD mode
	SET_RW();		//Read mode
  72:	95 9a       	sbi	0x12, 5	; 18
	CLEAR_RS();		//Read status
  74:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  76:	81 e0       	ldi	r24, 0x01	; 1
  78:	8a 95       	dec	r24
  7a:	f1 f7       	brne	.-4      	; 0x78 <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
  7c:	21 e0       	ldi	r18, 0x01	; 1
  7e:	32 e0       	ldi	r19, 0x02	; 2
  80:	97 9a       	sbi	0x12, 7	; 18
  82:	82 2f       	mov	r24, r18
  84:	8a 95       	dec	r24
  86:	f1 f7       	brne	.-4      	; 0x84 <LCDBusyLoop+0x18>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
  88:	83 b3       	in	r24, 0x13	; 19
		status=status<<4;
  8a:	82 95       	swap	r24
  8c:	80 7f       	andi	r24, 0xF0	; 240
  8e:	92 2f       	mov	r25, r18
  90:	9a 95       	dec	r25
  92:	f1 f7       	brne	.-4      	; 0x90 <LCDBusyLoop+0x24>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
  94:	97 98       	cbi	0x12, 7	; 18
  96:	93 2f       	mov	r25, r19
  98:	9a 95       	dec	r25
  9a:	f1 f7       	brne	.-4      	; 0x98 <LCDBusyLoop+0x2c>
		_delay_us(1);	//tEL

		SET_E();
  9c:	97 9a       	sbi	0x12, 7	; 18
  9e:	92 2f       	mov	r25, r18
  a0:	9a 95       	dec	r25
  a2:	f1 f7       	brne	.-4      	; 0xa0 <LCDBusyLoop+0x34>
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
  a4:	93 b3       	in	r25, 0x13	; 19
  a6:	92 2f       	mov	r25, r18
  a8:	9a 95       	dec	r25
  aa:	f1 f7       	brne	.-4      	; 0xa8 <LCDBusyLoop+0x3c>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
  ac:	97 98       	cbi	0x12, 7	; 18
  ae:	93 2f       	mov	r25, r19
  b0:	9a 95       	dec	r25
  b2:	f1 f7       	brne	.-4      	; 0xb0 <LCDBusyLoop+0x44>
		_delay_us(1);	//tEL
	}while(busy);
  b4:	87 fd       	sbrc	r24, 7
  b6:	e4 cf       	rjmp	.-56     	; 0x80 <LCDBusyLoop+0x14>

	CLEAR_RW();		//write mode
  b8:	95 98       	cbi	0x12, 5	; 18
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
  ba:	84 b3       	in	r24, 0x14	; 20
  bc:	8f 60       	ori	r24, 0x0F	; 15
  be:	84 bb       	out	0x14, r24	; 20

}
  c0:	08 95       	ret

000000c2 <LCDByte>:
#define CLEAR_RW() (LCD_RW_PORT&=(~(1<<LCD_RW_POS)))



void LCDByte(uint8_t c,uint8_t isdata)
{
  c2:	28 2f       	mov	r18, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
  c4:	66 23       	and	r22, r22
  c6:	11 f4       	brne	.+4      	; 0xcc <LCDByte+0xa>
	CLEAR_RS();
  c8:	96 98       	cbi	0x12, 6	; 18
  ca:	01 c0       	rjmp	.+2      	; 0xce <LCDByte+0xc>
else
	SET_RS();
  cc:	96 9a       	sbi	0x12, 6	; 18
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	8a 95       	dec	r24
  d2:	f1 f7       	brne	.-4      	; 0xd0 <LCDByte+0xe>

_delay_us(0.500);		//tAS

SET_E();
  d4:	97 9a       	sbi	0x12, 7	; 18

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
  d6:	85 b3       	in	r24, 0x15	; 21
  d8:	92 2f       	mov	r25, r18
  da:	92 95       	swap	r25
  dc:	9f 70       	andi	r25, 0x0F	; 15
  de:	80 7f       	andi	r24, 0xF0	; 240
  e0:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
  e2:	95 bb       	out	0x15, r25	; 21
  e4:	92 e0       	ldi	r25, 0x02	; 2
  e6:	89 2f       	mov	r24, r25
  e8:	8a 95       	dec	r24
  ea:	f1 f7       	brne	.-4      	; 0xe8 <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
  ec:	97 98       	cbi	0x12, 7	; 18
  ee:	89 2f       	mov	r24, r25
  f0:	8a 95       	dec	r24
  f2:	f1 f7       	brne	.-4      	; 0xf0 <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
  f4:	97 9a       	sbi	0x12, 7	; 18

temp=(LCD_DATA_PORT & 0XF0)|(ln);
  f6:	85 b3       	in	r24, 0x15	; 21
  f8:	2f 70       	andi	r18, 0x0F	; 15
  fa:	80 7f       	andi	r24, 0xF0	; 240
  fc:	82 2b       	or	r24, r18

LCD_DATA_PORT=temp;
  fe:	85 bb       	out	0x15, r24	; 21
 100:	89 2f       	mov	r24, r25
 102:	8a 95       	dec	r24
 104:	f1 f7       	brne	.-4      	; 0x102 <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 106:	97 98       	cbi	0x12, 7	; 18
 108:	9a 95       	dec	r25
 10a:	f1 f7       	brne	.-4      	; 0x108 <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 10c:	0e 94 36 00 	call	0x6c	; 0x6c <LCDBusyLoop>
}
 110:	08 95       	ret

00000112 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 112:	1f 93       	push	r17
 114:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 116:	80 e6       	ldi	r24, 0x60	; 96
 118:	9a ee       	ldi	r25, 0xEA	; 234
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <InitLCD+0x8>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 11e:	84 b3       	in	r24, 0x14	; 20
 120:	8f 60       	ori	r24, 0x0F	; 15
 122:	84 bb       	out	0x14, r24	; 20
	LCD_E_DDR|=(1<<LCD_E_POS);
 124:	8f 9a       	sbi	0x11, 7	; 17
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 126:	8e 9a       	sbi	0x11, 6	; 17
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 128:	8d 9a       	sbi	0x11, 5	; 17

	LCD_DATA_PORT&=0XF0;
 12a:	85 b3       	in	r24, 0x15	; 21
 12c:	80 7f       	andi	r24, 0xF0	; 240
 12e:	85 bb       	out	0x15, r24	; 21
	CLEAR_E();
 130:	97 98       	cbi	0x12, 7	; 18
	CLEAR_RW();
 132:	95 98       	cbi	0x12, 5	; 18
	CLEAR_RS();
 134:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	8a 95       	dec	r24
 13a:	f1 f7       	brne	.-4      	; 0x138 <InitLCD+0x26>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 13c:	97 9a       	sbi	0x12, 7	; 18
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 13e:	a9 9a       	sbi	0x15, 1	; 21
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	98 2f       	mov	r25, r24
 144:	9a 95       	dec	r25
 146:	f1 f7       	brne	.-4      	; 0x144 <InitLCD+0x32>
	_delay_us(1);
	CLEAR_E();
 148:	97 98       	cbi	0x12, 7	; 18
 14a:	8a 95       	dec	r24
 14c:	f1 f7       	brne	.-4      	; 0x14a <InitLCD+0x38>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 14e:	0e 94 36 00 	call	0x6c	; 0x6c <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 152:	81 2f       	mov	r24, r17
 154:	8c 60       	ori	r24, 0x0C	; 12
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	0e 94 61 00 	call	0xc2	; 0xc2 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 15c:	88 e2       	ldi	r24, 0x28	; 40
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	0e 94 61 00 	call	0xc2	; 0xc2 <LCDByte>
}
 164:	1f 91       	pop	r17
 166:	08 95       	ret

00000168 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	ec 01       	movw	r28, r24
 16e:	04 c0       	rjmp	.+8      	; 0x178 <LCDWriteString+0x10>


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
 170:	61 e0       	ldi	r22, 0x01	; 1
 172:	0e 94 61 00 	call	0xc2	; 0xc2 <LCDByte>
	msg++;
 176:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 178:	88 81       	ld	r24, Y
 17a:	88 23       	and	r24, r24
 17c:	c9 f7       	brne	.-14     	; 0x170 <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 184:	ef 92       	push	r14
 186:	ff 92       	push	r15
 188:	0f 93       	push	r16
 18a:	1f 93       	push	r17
 18c:	df 93       	push	r29
 18e:	cf 93       	push	r28
 190:	00 d0       	rcall	.+0      	; 0x192 <LCDWriteInt+0xe>
 192:	00 d0       	rcall	.+0      	; 0x194 <LCDWriteInt+0x10>
 194:	0f 92       	push	r0
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
 19a:	9c 01       	movw	r18, r24
 19c:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 19e:	fe 01       	movw	r30, r28
 1a0:	31 96       	adiw	r30, 0x01	; 1
 1a2:	85 e0       	ldi	r24, 0x05	; 5
 1a4:	df 01       	movw	r26, r30
 1a6:	1d 92       	st	X+, r1
 1a8:	8a 95       	dec	r24
 1aa:	e9 f7       	brne	.-6      	; 0x1a6 <LCDWriteInt+0x22>
 1ac:	fe 01       	movw	r30, r28
 1ae:	35 96       	adiw	r30, 0x05	; 5
 1b0:	0d c0       	rjmp	.+26     	; 0x1cc <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 1b2:	c9 01       	movw	r24, r18
 1b4:	6a e0       	ldi	r22, 0x0A	; 10
 1b6:	70 e0       	ldi	r23, 0x00	; 0
 1b8:	0e 94 6e 01 	call	0x2dc	; 0x2dc <__divmodhi4>
 1bc:	80 83       	st	Z, r24
	val=val/10;
 1be:	c9 01       	movw	r24, r18
 1c0:	6a e0       	ldi	r22, 0x0A	; 10
 1c2:	70 e0       	ldi	r23, 0x00	; 0
 1c4:	0e 94 6e 01 	call	0x2dc	; 0x2dc <__divmodhi4>
 1c8:	9b 01       	movw	r18, r22
 1ca:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 1cc:	21 15       	cp	r18, r1
 1ce:	31 05       	cpc	r19, r1
 1d0:	81 f7       	brne	.-32     	; 0x1b2 <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 1d2:	bf ef       	ldi	r27, 0xFF	; 255
 1d4:	0f 3f       	cpi	r16, 0xFF	; 255
 1d6:	1b 07       	cpc	r17, r27
 1d8:	79 f4       	brne	.+30     	; 0x1f8 <LCDWriteInt+0x74>
 1da:	20 e0       	ldi	r18, 0x00	; 0
 1dc:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 1de:	ae 01       	movw	r20, r28
 1e0:	4f 5f       	subi	r20, 0xFF	; 255
 1e2:	5f 4f       	sbci	r21, 0xFF	; 255
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <LCDWriteInt+0x66>
 1e6:	2f 5f       	subi	r18, 0xFF	; 255
 1e8:	3f 4f       	sbci	r19, 0xFF	; 255
 1ea:	fa 01       	movw	r30, r20
 1ec:	e2 0f       	add	r30, r18
 1ee:	f3 1f       	adc	r31, r19
 1f0:	80 81       	ld	r24, Z
 1f2:	88 23       	and	r24, r24
 1f4:	c1 f3       	breq	.-16     	; 0x1e6 <LCDWriteInt+0x62>
 1f6:	04 c0       	rjmp	.+8      	; 0x200 <LCDWriteInt+0x7c>
	else
		j=5-field_length;
 1f8:	25 e0       	ldi	r18, 0x05	; 5
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	20 1b       	sub	r18, r16
 1fe:	31 0b       	sbc	r19, r17
 200:	7e 01       	movw	r14, r28
 202:	08 94       	sec
 204:	e1 1c       	adc	r14, r1
 206:	f1 1c       	adc	r15, r1
 208:	e2 0e       	add	r14, r18
 20a:	f3 1e       	adc	r15, r19
 20c:	89 01       	movw	r16, r18
 20e:	09 c0       	rjmp	.+18     	; 0x222 <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 210:	f7 01       	movw	r30, r14
 212:	81 91       	ld	r24, Z+
 214:	7f 01       	movw	r14, r30
 216:	80 5d       	subi	r24, 0xD0	; 208
 218:	61 e0       	ldi	r22, 0x01	; 1
 21a:	0e 94 61 00 	call	0xc2	; 0xc2 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 21e:	0f 5f       	subi	r16, 0xFF	; 255
 220:	1f 4f       	sbci	r17, 0xFF	; 255
 222:	05 30       	cpi	r16, 0x05	; 5
 224:	11 05       	cpc	r17, r1
 226:	a4 f3       	brlt	.-24     	; 0x210 <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 228:	0f 90       	pop	r0
 22a:	0f 90       	pop	r0
 22c:	0f 90       	pop	r0
 22e:	0f 90       	pop	r0
 230:	0f 90       	pop	r0
 232:	cf 91       	pop	r28
 234:	df 91       	pop	r29
 236:	1f 91       	pop	r17
 238:	0f 91       	pop	r16
 23a:	ff 90       	pop	r15
 23c:	ef 90       	pop	r14
 23e:	08 95       	ret

00000240 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 240:	88 32       	cpi	r24, 0x28	; 40
 242:	30 f4       	brcc	.+12     	; 0x250 <LCDGotoXY+0x10>
 {
  if(y) x|=0b01000000;
 244:	61 11       	cpse	r22, r1
 246:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 248:	80 68       	ori	r24, 0x80	; 128
 24a:	60 e0       	ldi	r22, 0x00	; 0
 24c:	0e 94 61 00 	call	0xc2	; 0xc2 <LCDByte>
 250:	08 95       	ret

00000252 <GetKeyPressed>:
      None. Can be called without any setup.

   *******************************************/
   
uint8_t GetKeyPressed(void)
{
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
  uint8_t r,c;

  KEYPAD_PORT|= 0X0F;
 256:	8b b3       	in	r24, 0x1b	; 27
 258:	8f 60       	ori	r24, 0x0F	; 15
 25a:	8b bb       	out	0x1b, r24	; 27
 25c:	60 e0       	ldi	r22, 0x00	; 0
 25e:	70 e0       	ldi	r23, 0x00	; 0

  for(c=0;c<3;c++)
  {
	 KEYPAD_DDR&=~(0X7F);
	 KEYPAD_DDR|=(0X40>>c);
 260:	c0 e4       	ldi	r28, 0x40	; 64
 262:	d0 e0       	ldi	r29, 0x00	; 0
	 for(r=0;r<4;r++)
	 {
		if(!(KEYPAD_PIN & (0X08>>r)))
 264:	a8 e0       	ldi	r26, 0x08	; 8
 266:	b0 e0       	ldi	r27, 0x00	; 0
   
uint8_t GetKeyPressed(void)
{
  uint8_t r,c;

  KEYPAD_PORT|= 0X0F;
 268:	e6 2f       	mov	r30, r22

  for(c=0;c<3;c++)
  {
	 KEYPAD_DDR&=~(0X7F);
 26a:	8a b3       	in	r24, 0x1a	; 26
 26c:	80 78       	andi	r24, 0x80	; 128
 26e:	8a bb       	out	0x1a, r24	; 26
	 KEYPAD_DDR|=(0X40>>c);
 270:	2a b3       	in	r18, 0x1a	; 26
 272:	ce 01       	movw	r24, r28
 274:	06 2e       	mov	r0, r22
 276:	02 c0       	rjmp	.+4      	; 0x27c <GetKeyPressed+0x2a>
 278:	95 95       	asr	r25
 27a:	87 95       	ror	r24
 27c:	0a 94       	dec	r0
 27e:	e2 f7       	brpl	.-8      	; 0x278 <GetKeyPressed+0x26>
 280:	28 2b       	or	r18, r24
 282:	2a bb       	out	0x1a, r18	; 26
 284:	40 e0       	ldi	r20, 0x00	; 0
 286:	50 e0       	ldi	r21, 0x00	; 0
	 for(r=0;r<4;r++)
	 {
		if(!(KEYPAD_PIN & (0X08>>r)))
 288:	89 b3       	in	r24, 0x19	; 25
 28a:	9d 01       	movw	r18, r26
 28c:	04 2e       	mov	r0, r20
 28e:	02 c0       	rjmp	.+4      	; 0x294 <GetKeyPressed+0x42>
 290:	35 95       	asr	r19
 292:	27 95       	ror	r18
 294:	0a 94       	dec	r0
 296:	e2 f7       	brpl	.-8      	; 0x290 <GetKeyPressed+0x3e>
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	28 23       	and	r18, r24
 29c:	39 23       	and	r19, r25
 29e:	23 2b       	or	r18, r19
 2a0:	39 f4       	brne	.+14     	; 0x2b0 <GetKeyPressed+0x5e>
		{
		   return (r*3+c);
 2a2:	ca 01       	movw	r24, r20
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	84 0f       	add	r24, r20
 2aa:	95 1f       	adc	r25, r21
 2ac:	8e 0f       	add	r24, r30
 2ae:	0b c0       	rjmp	.+22     	; 0x2c6 <GetKeyPressed+0x74>
 2b0:	4f 5f       	subi	r20, 0xFF	; 255
 2b2:	5f 4f       	sbci	r21, 0xFF	; 255

  for(c=0;c<3;c++)
  {
	 KEYPAD_DDR&=~(0X7F);
	 KEYPAD_DDR|=(0X40>>c);
	 for(r=0;r<4;r++)
 2b4:	44 30       	cpi	r20, 0x04	; 4
 2b6:	51 05       	cpc	r21, r1
 2b8:	39 f7       	brne	.-50     	; 0x288 <GetKeyPressed+0x36>
 2ba:	6f 5f       	subi	r22, 0xFF	; 255
 2bc:	7f 4f       	sbci	r23, 0xFF	; 255
{
  uint8_t r,c;

  KEYPAD_PORT|= 0X0F;

  for(c=0;c<3;c++)
 2be:	63 30       	cpi	r22, 0x03	; 3
 2c0:	71 05       	cpc	r23, r1
 2c2:	91 f6       	brne	.-92     	; 0x268 <GetKeyPressed+0x16>
 2c4:	8f ef       	ldi	r24, 0xFF	; 255
		}
	 }
  }

  return 0XFF;//Indicate No key pressed
}
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	08 95       	ret

000002cc <main>:


int main(void) 
{
 
  set_output(DDRD, LED);
 2cc:	88 9a       	sbi	0x11, 0	; 17
  set_input(DDRB, LSNR);  
 2ce:	b8 98       	cbi	0x17, 0	; 23
  
  while (1) {
    if(bit_is_set(PORTB,PB0))
 2d0:	c0 9b       	sbis	0x18, 0	; 24
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <main+0xc>
    output_low(PORTD, LED);
 2d4:	90 98       	cbi	0x12, 0	; 18
 2d6:	fc cf       	rjmp	.-8      	; 0x2d0 <main+0x4>
    else
    output_high(PORTD, LED);    
 2d8:	90 9a       	sbi	0x12, 0	; 18
 2da:	fa cf       	rjmp	.-12     	; 0x2d0 <main+0x4>

000002dc <__divmodhi4>:
 2dc:	97 fb       	bst	r25, 7
 2de:	09 2e       	mov	r0, r25
 2e0:	07 26       	eor	r0, r23
 2e2:	0a d0       	rcall	.+20     	; 0x2f8 <__divmodhi4_neg1>
 2e4:	77 fd       	sbrc	r23, 7
 2e6:	04 d0       	rcall	.+8      	; 0x2f0 <__divmodhi4_neg2>
 2e8:	0c d0       	rcall	.+24     	; 0x302 <__udivmodhi4>
 2ea:	06 d0       	rcall	.+12     	; 0x2f8 <__divmodhi4_neg1>
 2ec:	00 20       	and	r0, r0
 2ee:	1a f4       	brpl	.+6      	; 0x2f6 <__divmodhi4_exit>

000002f0 <__divmodhi4_neg2>:
 2f0:	70 95       	com	r23
 2f2:	61 95       	neg	r22
 2f4:	7f 4f       	sbci	r23, 0xFF	; 255

000002f6 <__divmodhi4_exit>:
 2f6:	08 95       	ret

000002f8 <__divmodhi4_neg1>:
 2f8:	f6 f7       	brtc	.-4      	; 0x2f6 <__divmodhi4_exit>
 2fa:	90 95       	com	r25
 2fc:	81 95       	neg	r24
 2fe:	9f 4f       	sbci	r25, 0xFF	; 255
 300:	08 95       	ret

00000302 <__udivmodhi4>:
 302:	aa 1b       	sub	r26, r26
 304:	bb 1b       	sub	r27, r27
 306:	51 e1       	ldi	r21, 0x11	; 17
 308:	07 c0       	rjmp	.+14     	; 0x318 <__udivmodhi4_ep>

0000030a <__udivmodhi4_loop>:
 30a:	aa 1f       	adc	r26, r26
 30c:	bb 1f       	adc	r27, r27
 30e:	a6 17       	cp	r26, r22
 310:	b7 07       	cpc	r27, r23
 312:	10 f0       	brcs	.+4      	; 0x318 <__udivmodhi4_ep>
 314:	a6 1b       	sub	r26, r22
 316:	b7 0b       	sbc	r27, r23

00000318 <__udivmodhi4_ep>:
 318:	88 1f       	adc	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	5a 95       	dec	r21
 31e:	a9 f7       	brne	.-22     	; 0x30a <__udivmodhi4_loop>
 320:	80 95       	com	r24
 322:	90 95       	com	r25
 324:	bc 01       	movw	r22, r24
 326:	cd 01       	movw	r24, r26
 328:	08 95       	ret

0000032a <_exit>:
 32a:	f8 94       	cli

0000032c <__stop_program>:
 32c:	ff cf       	rjmp	.-2      	; 0x32c <__stop_program>
